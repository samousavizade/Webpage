import React, {useState} from "react";

import {Stack,} from "@mui/material";
import ArticlesGridItemComponent from "@/components/articles_grid_item";
import useBreakpoint from "@/components/use_breakpoint";
import Head from "next/head";

import {fetchArticles} from "@/lib/prisma";

export async function getStaticProps(context) {
    const articles = await fetchArticles();
    return {
        props: {
            articlesList: articles,
        }
    }
}

export default function ArticlesGridComponent({articlesList, authorsList, onClickLike, ...props}) {
    // come from static props function that defined above.
    // console.log("articles list: \n", articlesList)

    const [articlesListState, setArticlesListState] = useState(articlesList);
    const [authorsListState, setAuthorsListState] = useState(articlesList);

    const handleClickLike = (article) => {
        const articlesListNextState = [...articlesListState];
        const index = articlesListNextState.indexOf(article);
        const toGetChangedArticle = articlesListNextState[index];

        // if (toGetChangedArticle !== undefined) {
        //     switch (toGetChangedArticle.doesCurrentUserLike) {
        //         case true:
        //             toGetChangedArticle.doesCurrentUserLike = false;
        //
        //             toGetChangedArticle.nLikes = toGetChangedArticle.nLikes - 1;
        //             setArticlesListState(articlesListNextState);
        //             break;
        //
        //         case false:
        //             toGetChangedArticle.doesCurrentUserLike = true;
        //
        //             toGetChangedArticle.nLikes = toGetChangedArticle.nLikes + 1;
        //             setArticlesListState(articlesListNextState);
        //             break;
        //
        //         default:
        //             break;
        //     }
        // } else {
        //     // handling error
        // }
    };

    const currentBreakpoint = useBreakpoint();

    let nColumns = 0
    switch (currentBreakpoint) {
        case "xs":
            nColumns = 1;
            break;
        case "sm":
            nColumns = 1;
            break;
        case "md":
            nColumns = 2;
            break;
        case "lg":
            nColumns = 3;

            break;
        case "xl":
            nColumns = 4;
            break;

        default:
            nColumns = 1;
    }

    const columnsItems = Array(nColumns);
    for (let columnIndex = 0; columnIndex < nColumns; columnIndex++) {
        columnsItems[columnIndex] = []
    }

    for (let articleIndex = 0; articleIndex < articlesList.length; articleIndex++) {
        columnsItems[articleIndex % nColumns].push(articlesList[articleIndex])
    }

    return (
        <>
            <Head>
                <title>Blog</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <Stack direction={"row"} spacing={2}>
                {columnsItems.map((items, columnIndex) => {
                    return (
                        <Stack direction={"column"} spacing={2} width={1 / nColumns} key={columnIndex}> {
                            items.map((item, rowIndex) => {
                                return (
                                    <ArticlesGridItemComponent
                                        key={item.article_id}
                                        article={item}
                                        onClickLike={handleClickLike}
                                    />
                                )
                            })}
                        </Stack>
                    )
                })}
            </Stack>
        </>

    );
}
