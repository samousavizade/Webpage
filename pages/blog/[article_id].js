import BlogArticleComponent from "../../components/article_page/blog_article_component";
import Head from "next/head";
import React, {useEffect, useState} from "react";
import useSWR from "swr";
import {fetchArticles} from "../../lib/prisma";
import {useSession} from "next-auth/react";
import {useRouter} from "next/router";

export async function getStaticProps(staticProps) {
    const params = staticProps.params;
    const intendedArticleId = parseInt(params.article_id)

    const articles = await fetchArticles();
    const article = articles.find((item) => {
        // be aware that item.id is number where params.article_id is string
        return item.id === intendedArticleId // dynamic page id
    });

    if (article === undefined) {
        console.log("article is undefined ... ", params.article_id)
        return {
            notFound: true, //redirects to 404 page
        };
    }

    console.log("article.id", article.id)

    const featuredArticles = articles.filter((item) => {
        let n = (Math.abs(item.id - intendedArticleId) % articles.length)
        return n >= 1 && n <= 3;
    })


    return {
        props: {
            intendedArticle: article,
            featuredArticles: featuredArticles,
        }
    }
}

export async function getStaticPaths() {

    const articles = await fetchArticles();

    return {
        paths: articles.map((item) => {
            return {params: {article_id: `${item.id}`}}
        }),
        fallback: false
    }
}

const ArticleComponent = ({intendedArticle, featuredArticles}) => {
    const {data: session, status, update: updateSession} = useSession()
    const fetcher = (url) => fetch(url).then((res) => res.json());
    const {
        data,
        error
    } = useSWR(`/api/getArticleLikesCountById?id=${intendedArticle.id}`, fetcher);

    const [likesCount, setLikesCount] = useState(intendedArticle.nLikes);
    const [doesCurrentUserLike, setDoesCurrentUserLike] = useState();

    console.log("current user like? ", doesCurrentUserLike)

    useEffect(() => {
        let doesCurrentUserLikeInitialState = false;
        if (session) {
            doesCurrentUserLikeInitialState = session.user.likedArticles.includes(intendedArticle.id)
        }
        console.log("Does current user like? ", doesCurrentUserLikeInitialState)

        setDoesCurrentUserLike(doesCurrentUserLikeInitialState)
        if (data) {
            setLikesCount(data.nLikes);
        }
    }, [data, session]);


    return (
        // <>
        //     <Head>
        //         <title>{article.title}</title>
        //     </Head>
        //     <h1>
        //         Article with id: {router.query.article_id}
        //     </h1>
        //     <h2>
        //         Article Title: {article.title}
        //     </h2>
        //     {Object.values(data).map((item) => {
        //         return <div key={item.title}>
        //             <h1>{item.title}</h1>
        //             <p>{item.body}</p>
        //         </div>
        //     })
        //     }
        // </>
        <>
            <Head>
                <title>{intendedArticle.title}</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <BlogArticleComponent
                intendedArticle={intendedArticle}
                featuredArticles={featuredArticles}
                likesCount={likesCount}
                setLikesCount={setLikesCount}
                doesCurrentUserLike={doesCurrentUserLike}
                setDoesCurrentUserLike={setDoesCurrentUserLike}
            />
        </>
    )
}

export default ArticleComponent;